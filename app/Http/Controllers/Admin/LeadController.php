<?php

namespace App\Http\Controllers\Admin;

use App\Models\User;
use App\Models\LeadModel;
use App\Models\TypeModel;
use App\Models\IdStoreModel;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Auth;
use Maatwebsite\Excel\Facades\Excel;
use App\Exports\LeadExport;

class LeadController extends Controller
{
	use AutoGeneratedController;
	
	/**
	 * Display a listing of the resource.
	 *
	 * @return \Illuminate\Http\Response
	 */
	public function index()
	{
		$users = User::select(['id', 'name'])->orderBy('name')->get();
		$leadTypes = TypeModel::select(['id', 'type'])->where('parent_id', 4)->where('active', true)->get();
		$actions = TypeModel::select(['id', 'type'])->where('parent_id', 8)->where('active', true)->orderBy('type')->get();
		
		$leads = LeadModel::where('active', true);

		if (request()->query('leadType')){
			$leads = $leads->where('lead_type', request()->query('leadType'));
		}
		if (request()->query('start_date')){
			$leads = $leads->where('lead_date', '>=', request()->query('start_date'));
		}
		if (request()->query('end_date')){
			$leads = $leads->where('lead_date', '<=', request()->query('end_date'));
		}
		if (request()->query('leadId')){
			$leads = $leads->where('lead_id', 'like', '%'.request()->query('leadId').'%');
		}
		if (request()->query('assignTo')){
			$leads = $leads->where('assign_to', request()->query('assignTo'));
		}
		if (request()->query('businessName')){
			$leads = $leads->where('business_name', 'like', '%'.request()->query('businessName').'%');
		}
		if (request()->query('actionReqd')){
			$leads = $leads->where('action', request()->query('actionReqd'));
		}

		$leads = Auth::user()->role == 3 ? $leads->where('assign_to', Auth::user()->id) : $leads;

		$leads = $leads->orderBy('lead_type')->paginate(10);

		return view('crm.leads.index', compact('leads', 'users', 'leadTypes', 'actions'));
	}

	/**
	 * Show the form for creating a new resource.
	 *
	 * @return \Illuminate\Http\Response
	 */
	public function create()
	{
		$users = User::select(['id', 'name'])->orderBy('name')->get();
		$leadTypes = TypeModel::where('parent_id', 4)->where('active', true)->get();
		$actions = TypeModel::where('parent_id', 8)->where('active', true)->get();

		return view('crm.leads.add', compact('users', 'leadTypes', 'actions'));
	}

	/**
	 * Store a newly created resource in storage.
	 *
	 * @param  \Illuminate\Http\Request  $request
	 * @return \Illuminate\Http\Response
	 */
	public function store(Request $request)
	{
		$request->validate([
			'business_name' => 'required|max:255',
			'location' => 'required|max:500',
			'contact_person' => 'required|max:255',
			'job_title' => 'required|max:255',
			'contact_no' => 'required|numeric',
			'whatsapp_no' => 'required|numeric',
			'email' => 'required|max:255|email',
			'lead_source' => 'required|max:255',
			'notes' => 'nullable|max:500',
			'lead_type' => 'required',
			'action' => 'required',
		], [
			'business_name.required' => 'Business name is required',
			'business_name.max' => 'Max 255 characters are allowed',
			'location.required' => 'Location is required',
			'location.max' => 'Max 500 characters are allowed',
			'contact_person.required' => 'Contact person\'s name is required',
			'contact_person.max' => 'Max 255 characters are allowed',
			'job_title.required' => 'Job title is required',
			'job_title.max' => 'Max 255 characters are allowed',
			'contact_no.required' => 'Contact no. is required',
			'contact_no.numeric' => 'Contact no. must be numeric',
			'whatsapp_no.required' => 'WhatsApp no. is required',
			'whatsapp_no.numeric' => 'WhatsApp no. must be numeric',
			'email.required' => 'Email is required',
			'email.max' => 'Max 255 characters are allowed',
			'email.email' => 'Invalid email address',
			'lead_source.required' => 'Lead source is required',
			'lead_source.max' => 'Max 255 characters are allowed',
			'notes.max' => 'Max 500 characters are allowed',
			'lead_type.required' => 'Lead type is required',
			'action.required' => 'Action is required',
		]);

		$data = new LeadModel;
		$leadId = $this->autoId('lead');
		$leadType = 'lead';
		$owner = Auth::user()->id;
		$ownerType = Auth::user()->role;

		$data->lead_id = $leadId;
		$data->lead_date = now();
		$data->lead_owner = $owner;
		$data->owner_type = $ownerType;
		$data->business_name = $request->business_name;
		$data->location = $request->location;
		$data->contact_person = $request->contact_person;
		$data->job_title = $request->job_title;
		$data->contact_no = $request->contact_no;
		$data->whatsapp_no = $request->whatsapp_no;
		$data->email = $request->email;
		$data->lead_source = $request->lead_source;
		$data->assign_to = $request->assign_to;
		$data->notes = $request->notes;
		$data->lead_type = $request->lead_type;
		$data->action = $request->action;
		$data->save();

		$leadCount = IdStoreModel::where('id_type', 'lead')->count();
		if ($leadCount==0){
			IdStoreModel::insert([
				'last_id' => $leadId,
				'id_num' => 1,
				'id_type' => $leadType,
				'created_at' => now(),
			]);
		}else{
			$curr_num = IdStoreModel::select('id_num')->where('id_type', 'lead')->first();
			$new_num = $curr_num->id_num + 1;

			IdStoreModel::where('id_type', 'lead')->update([
				'last_id' => $leadId,
				'id_num' => $new_num,
				'id_type' => $leadType,
				'updated_at' => now(),
			]);
		}
		$notification = [
			"message" => "Lead saved",
			"alert-type" => "success"
		];
		return redirect()->back()->with($notification);
	}

	/**
	 * Display the specified resource.
	 *
	 * @param  int  $id
	 * @return \Illuminate\Http\Response
	 */
	public function show($id)
	{
		$users = User::select(['id', 'name'])->orderBy('name')->get();
		$leadTypes = TypeModel::where('parent_id', 4)->where('active', true)->get();
		$actions = TypeModel::where('parent_id', 8)->where('active', true)->get();

		$otherLeads = LeadModel::select(['id', 'business_name'])
															->where('id', '!=', $id)
															->where('post_followup_status', 21);

		$otherLeads = Auth::user()->role == 3 ? $otherLeads->where('assign_to', Auth::user()->id) : $otherLeads;
		$otherLeads = $otherLeads->orderBy('business_name')->get();

		$data = LeadModel::findOrFail($id);

		return view('crm.leads.view', compact('data', 'users', 'leadTypes', 'actions', 'otherLeads'));
	}

	/**
	 * Show the form for editing the specified resource.
	 *
	 * @param  int  $id
	 * @return \Illuminate\Http\Response
	 */
	public function edit($id)
	{
		$users = User::select(['id', 'name'])->orderBy('name')->get();
		$leadTypes = TypeModel::where('parent_id', 4)->where('active', true)->get();
		$actions = TypeModel::where('parent_id', 8)->where('active', true)->get();

		$data = LeadModel::findOrFail($id);

		return view('crm.leads.edit', compact('data', 'users', 'leadTypes', 'actions'));
	}

	/**
	 * Update the specified resource in storage.
	 *
	 * @param  \Illuminate\Http\Request  $request
	 * @param  int  $id
	 * @return \Illuminate\Http\Response
	 */
	public function update(Request $request, $id)
	{
		$request->validate([
			'business_name' => 'required|max:255',
			'location' => 'required|max:500',
			'contact_person' => 'required|max:255',
			'job_title' => 'required|max:255',
			'contact_no' => 'required|numeric',
			'whatsapp_no' => 'required|numeric',
			'email' => 'required|max:255|email',
			'lead_source' => 'required|max:255',
			'notes' => 'nullable|max:500',
			'lead_type' => 'required',
			'action' => 'required',
		], [
			'business_name.required' => 'Business name is required',
			'business_name.max' => 'Max 255 characters are allowed',
			'location.required' => 'Location is required',
			'location.max' => 'Max 500 characters are allowed',
			'contact_person.required' => 'Contact person\'s name is required',
			'contact_person.max' => 'Max 255 characters are allowed',
			'job_title.required' => 'Job title is required',
			'job_title.max' => 'Max 255 characters are allowed',
			'contact_no.required' => 'Contact no. is required',
			'contact_no.numeric' => 'Contact no. must be numeric',
			'whatsapp_no.required' => 'WhatsApp no. is required',
			'whatsapp_no.numeric' => 'WhatsApp no. must be numeric',
			'email.required' => 'Email is required',
			'email.max' => 'Max 255 characters are allowed',
			'email.email' => 'Invalid email address',
			'lead_source.required' => 'Lead source is required',
			'lead_source.max' => 'Max 255 characters are allowed',
			'notes.max' => 'Max 500 characters are allowed',
			'lead_type.required' => 'Lead type is required',
			'action.required' => 'Action is required',
		]);

		$data = LeadModel::findOrFail($id);

		$data->business_name = $request->business_name;
		$data->location = $request->location;
		$data->contact_person = $request->contact_person;
		$data->job_title = $request->job_title;
		$data->contact_no = $request->contact_no;
		$data->whatsapp_no = $request->whatsapp_no;
		$data->email = $request->email;
		$data->lead_source = $request->lead_source;
		$data->assign_to = $request->assign_to;
		$data->notes = $request->notes;
		$data->lead_type = $request->lead_type;
		$data->action = $request->action;
		$data->save();

		$notification = [
			"message" => "Changes saved",
			"alert-type" => "warning"
		];
		return redirect()->route('lead.index')->with($notification);
	}

	/**
	 * Remove the specified resource from storage.
	 *
	 * @param  int  $id
	 * @return \Illuminate\Http\Response
	 */
	public function destroy(Request $request)
	{
		$data = LeadModel::findOrFail($request->leadId)->update([
			'active' => false,
			'updated_at' => now(),
		]);
	}

	public function leadAssignTo(Request $request){
		LeadModel::findOrFail($request->lead_id)->update([
			'assign_to' => $request->assign_to
		]);
	}

	//------------------------------ Export to Excel Query based --------------------------------//

	// public function export(Request $request){

	// 	$tableFields = [];
	// 	$excelHeaders = [];

	// 	foreach ($request->fields as $field) {
	// 		$field = explode('|', $field);
	// 		$tableField = $field[0];
	// 		$excelHeader = $field[1];

	// 		$tableFields[] = $tableField;
	// 		$excelHeaders[] = $excelHeader;
	// 	}

	// 	return Excel::download(new LeadExport($tableFields, $excelHeaders), 'leads-'.date('Y-m-d-H-i-s').'.xlsx');
	// }

	//------------------------------ Export to Excel View based --------------------------------//

	public function export(Request $request){

		$tableFields = [];
		$excelHeaders = [];

		foreach ($request->fields as $field) {
			$field = explode('|', $field);
			$tableField = $field[0];
			$excelHeader = $field[1];

			$tableFields[] = $tableField;
			$excelHeaders[] = $excelHeader;
		}

		$leads = LeadModel::select($tableFields);
		
		if ($request->leadType){
			$leads = $leads->where('lead_type', $request->leadType);
		}
		if ($request->start_date){
			$leads = $leads->where('lead_date', '>=', $request->start_date);
		}
		if ($request->end_date){
			$leads = $leads->where('lead_date', '<=', $request->end_date);
		}
		if ($request->leadId){
			$leads = $leads->where('lead_id', 'like', '%'.$request->leadId.'%');
		}
		if ($request->assignTo){
			$leads = $leads->where('assign_to', $request->assignTo);
		}
		if ($request->businessName){
			$leads = $leads->where('business_name', 'like', '%'.$request->businessName.'%');
		}
		if ($request->actionReqd){
			$leads = $leads->where('action', $request->actionReqd);
		}
		
		$leads = $leads->where('active', true)->get();

		// return view('crm.leads.export-leads', compact('leads', 'excelHeaders', 'tableFields'));

		return Excel::download(new LeadExport($leads, $excelHeaders, $tableFields), 'leads-'.date('Y-m-d-H-i-s').'.xlsx');
	}
}